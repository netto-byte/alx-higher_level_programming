======================
How to use say_my_name
======================

This module defines a function that accepts two argument like names initials and print them accordingly.

USAGE
=====

``say_my_name(...)`` accept two arguments 'first_name' and 'last_name' and print to stdout 'My name is <first_name> <last_name>'.

================
SUCCESSFUL TESTS
================

``say_my_name(...)``: with two arguement passed (strings)
::
	>>> say_my_name = __import__('3-say_my_name').say_my_name
	>>> say_my_name("Alexander", "Edim")
	My name is Alexander Edim

``say_my_name(...)``: with one arguement passed (string) to be printed with a space at the end of the string
::
	>>> say_my_name("Alexander")
	My name is Alexander 


=================
EXCEPTION TESTING
=================

``say_my_name(...)``: passing a numeric value as argument
::
	>>> say_my_name("Year", 2024)
	Traceback (most recent call last):
	TypeError: last_name must be a string

``say_my_name(...)``: passing None to first parameter of the function
::
	>>> say_my_name(None, "Edim")
	Traceback (most recent call last):
	TypeError: first_name must be a string

``say_my_name(...)``: passig None to second parameter of the function
::
	>>> say_my_name("Alexander", None)
	Traceback (most recent call last):
	TypeError: last_name must be a string

``say_my_name(...)``: passing value to <last_name> alone
	>>> say_my_name(last_name="Edim")
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'
