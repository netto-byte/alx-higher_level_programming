======================
How to use add_integer
======================

This module defines an integer addition function ``add_integer(a, b=98)``.

USAGE
=====

``add_integer()`` returns the addition of two arguments (int or float). And authomatically converts an float into an int (if passed as an argument).

===========
With number
===========

``add_integer()`` with positive values
::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

``add_integer()`` with a negative value
::
	>>> add_integer(-1, 3)
	2

``add_integer()`` with only one argument passed (with `b` having a default value `98`)
::
	>>> add_integer(2)
	100

``add_integer()`` with positive float values
::
	>>> add_integer(1.5, 2.5)
	3

``add_integer()`` with one negative float values
::
	>>> add_integer(-1.5, 3.5)
	2

``add_integer()`` with two negative float values
::
	>>> add_integer(-2.8, -0.2)
	-2

``add_integer()`` with one negative float value passed
::
	>>> add_integer(-2.8)
	96

================
With non-numbers
================

``add_integer`` passing a non-numeric argument as first argument
::
	>>> add_integer('one', 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

``add_integer`` passing two non-numberic arguments
::
	>>> add_integer('one', 'two')
	Traceback (most recent call last):
	TypeError: a must be an integer

``add_integer`` passing a non-numeric argument as second argument
::
	>>> add_integer(1, 'two')
	Traceback (most recent call last):
	TypeError: b must be an integer

``add_integer`` passing `None` to the function
::
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

``add_integer`` passing None to `b` argument
::
	>>> add_integer(1, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

``add_integer`` passing infinity to function
::
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

``add_integer`` passing infinity to argument `b`
::
	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

``add_integer`` passing NaN number to function
::
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

``add_integer`` passing NaN as to `b` argument
::
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
